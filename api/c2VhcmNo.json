[{"title":"You've Got to Find What You Love","date":"2019-07-28T13:15:06.000Z","updated":"2019-07-28T16:26:50.885Z","content":"I am honored to be with you today at your commencement from one of the finest universities in the world. I never graduated from college. Truth be told, this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.\nThe first story is about connecting the dots.I  dropped out of Reed College after the first 6 months, but then stayed  around as a drop-in for another 18 months or so before I really quit. So  why did I drop out?\nIt started before I was born. My biological mother was a young, unwed  college graduate student, and she decided to put me up for adoption.  She felt very strongly that I should be adopted by college graduates, so  everything was all set for me to be adopted at birth by a lawyer and  his wife. Except that when I popped out they decided at the last minute  that they really wanted a girl. So my parents, who were on a waiting  list, got a call in the middle of the night asking: “We have an  unexpected baby boy; do you want him?” They said: “Of course.” My  biological mother later found out that my mother had never graduated  from college and that my father had never graduated from high school.  She refused to sign the final adoption papers. She only relented a few  months later when my parents promised that I would someday go to  college.\nAnd 17 years later I did go to college. But I naively chose a college  that was almost as expensive as Stanford, and all of my working-class  parents’ savings were being spent on my college tuition. After six  months, I couldn’t see the value in it. I had no idea what I wanted to  do with my life and no idea how college was going to help me figure it  out. And here I was spending all of the money my parents had saved their  entire life. So I decided to drop out and trust that it would all work  out OK. It was pretty scary at the time, but looking back it was one of  the best decisions I ever made. The minute I dropped out I could stop  taking the required classes that didn’t interest me, and begin dropping  in on the ones that looked interesting.\nIt wasn’t all romantic. I didn’t have a dorm room, so I slept on the  floor in friends’ rooms, I returned Coke bottles for the 5? deposits to  buy food with, and I would walk the 7 miles across town every Sunday  night to get one good meal a week at the Hare Krishna temple. I loved  it. And much of what I stumbled into by following my curiosity and  intuition turned out to be priceless later on. Let me give you one  example:\nReed College at that time offered perhaps the best calligraphy  instruction in the country. Throughout the campus every poster, every  label on every drawer, was beautifully hand calligraphed. Because I had  dropped out and didn’t have to take the normal classes, I decided to  take a calligraphy class to learn how to do this. I learned about serif  and sans serif typefaces, about varying the amount of space between  different letter combinations, about what makes great typography great.  It was beautiful, historical, artistically subtle in a way that science  can’t capture, and I found it fascinating.\nNone of this had even a hope of any practical application in my life.  But 10 years later, when we were designing the first Macintosh  computer, it all came back to me. And we designed it all into the Mac.  It was the first computer with beautiful typography. If I had never  dropped in on that single course in college, the Mac would have never  had multiple typefaces or proportionally spaced fonts. And since Windows  just copied the Mac, it’s likely that no personal computer would have  them. If I had never dropped out, I would have never dropped in on this  calligraphy class, and personal computers might not have the wonderful  typography that they do. Of course it was impossible to connect the dots  looking forward when I was in college. But it was very, very clear  looking backward 10 years later.\nAgain, you can’t connect the dots looking forward; you can only  connect them looking backward. So you have to trust that the dots will  somehow connect in your future. You have to trust in something — your  gut, destiny, life, karma, whatever. This approach has never let me  down, and it has made all the difference in my life.\nMy second story is about love and loss.I  was lucky — I found what I loved to do early in life. Woz and I started  Apple in my parents’ garage when I was 20. We worked hard, and in 10  years Apple had grown from just the two of us in a garage into a $2  billion company with over 4,000 employees. We had just released our  finest creation — the Macintosh — a year earlier, and I had just turned  30. And then I got fired. How can you get fired from a company you  started? Well, as Apple grew we hired someone who I thought was very  talented to run the company with me, and for the first year or so things  went well. But then our visions of the future began to diverge and  eventually we had a falling out. When we did, our Board of Directors  sided with him. So at 30 I was out. And very publicly out. What had been  the focus of my entire adult life was gone, and it was devastating.\nI really didn’t know what to do for a few months. I felt that I had  let the previous generation of entrepreneurs down — that I had dropped  the baton as it was being passed to me. I met with David Packard and Bob  Noyce and tried to apologize for screwing up so badly. I was a very  public failure, and I even thought about running away from the valley.  But something slowly began to dawn on me — I still loved what I did. The  turn of events at Apple had not changed that one bit. I had been  rejected, but I was still in love. And so I decided to start over.\nI didn’t see it then, but it turned out that getting fired from Apple  was the best thing that could have ever happened to me. The heaviness  of being successful was replaced by the lightness of being a beginner  again, less sure about everything. It freed me to enter one of the most  creative periods of my life.\nDuring the next five years, I started a company named NeXT, another  company named Pixar, and fell in love with an amazing woman who would  become my wife. Pixar went on to create the world’s first computer  animated feature film, Toy Story, and is now the most successful  animation studio in the world. In a remarkable turn of events, Apple  bought NeXT, I returned to Apple, and the technology we developed at  NeXT is at the heart of Apple’s current renaissance. And Laurene and I  have a wonderful family together.\nI’m pretty sure none of this would have happened if I hadn’t been  fired from Apple. It was awful tasting medicine, but I guess the patient  needed it. Sometimes life hits you in the head with a brick. Don’t lose  faith. I’m convinced that the only thing that kept me going was that I  loved what I did. You’ve got to find what you love. And that is as true  for your work as it is for your lovers. Your work is going to fill a  large part of your life, and the only way to be truly satisfied is to do  what you believe is great work. And the only way to do great work is to  love what you do. If you haven’t found it yet, keep looking. Don’t  settle. As with all matters of the heart, you’ll know when you find it.  And, like any great relationship, it just gets better and better as the  years roll on. So keep looking until you find it. Don’t settle.\nMy third story is about death.When  I was 17, I read a quote that went something like: “If you live each  day as if it was your last, someday you’ll most certainly be right.” It  made an impression on me, and since then, for the past 33 years, I have  looked in the mirror every morning and asked myself: “If today were the  last day of my life, would I want to do what I am about to do today?”  And whenever the answer has been “No” for too many days in a row, I know  I need to change something.\nRemembering that I’ll be dead soon is the most important tool I’ve  ever encountered to help me make the big choices in life. Because almost  everything — all external expectations, all pride, all fear of  embarrassment or failure — these things just fall away in the face of  death, leaving only what is truly important. Remembering that you are  going to die is the best way I know to avoid the trap of thinking you  have something to lose. You are already naked. There is no reason not to  follow your heart.\nAbout a year ago I was diagnosed with cancer. I had a scan at 7:30 in  the morning, and it clearly showed a tumor on my pancreas. I didn’t  even know what a pancreas was. The doctors told me this was almost  certainly a type of cancer that is incurable, and that I should expect  to live no longer than three to six months. My doctor advised me to go  home and get my affairs in order, which is doctor’s code for prepare to  die. It means to try to tell your kids everything you thought you’d have  the next 10 years to tell them in just a few months. It means to make  sure everything is buttoned up so that it will be as easy as possible  for your family. It means to say your goodbyes.\nI lived with that diagnosis all day. Later that evening I had a  biopsy, where they stuck an endoscope down my throat, through my stomach  and into my intestines, put a needle into my pancreas and got a few  cells from the tumor. I was sedated, but my wife, who was there, told me  that when they viewed the cells under a microscope the doctors started  crying because it turned out to be a very rare form of pancreatic cancer  that is curable with surgery. I had the surgery and I’m fine now.\nThis was the closest I’ve been to facing death, and I hope it’s the  closest I get for a few more decades. Having lived through it, I can now  say this to you with a bit more certainty than when death was a useful  but purely intellectual concept:\nNo one wants to die. Even people who want to go to heaven don’t want  to die to get there. And yet death is the destination we all share. No  one has ever escaped it. And that is as it should be, because Death is  very likely the single best invention of Life. It is Life’s change  agent. It clears out the old to make way for the new. Right now the new  is you, but someday not too long from now, you will gradually become the  old and be cleared away. Sorry to be so dramatic, but it is quite true.\nYour time is limited, so don’t waste it living someone else’s life.  Don’t be trapped by dogma — which is living with the results of other  people’s thinking. Don’t let the noise of others’ opinions drown out  your own inner voice. And most important, have the courage to follow  your heart and intuition. They somehow already know what you truly want  to become. Everything else is secondary.\nWhen I was young, there was an amazing publication called The Whole  Earth Catalog, which was one of the bibles of my generation. It was  created by a fellow named Stewart Brand not far from here in Menlo Park,  and he brought it to life with his poetic touch. This was in the late  1960s, before personal computers and desktop publishing, so it was all  made with typewriters, scissors and Polaroid cameras. It was sort of  like Google in paperback form, 35 years before Google came along: It was  idealistic, and overflowing with neat tools and great notions.\nStewart and his team put out several issues of The Whole Earth  Catalog, and then when it had run its course, they put out a final  issue. It was the mid-1970s, and I was your age. On the back cover of  their final issue was a photograph of an early morning country road, the  kind you might find yourself hitchhiking on if you were so adventurous.  Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their  farewell message as they signed off. Stay Hungry. Stay Foolish. And I  have always wished that for myself. And now, as you graduate to begin  anew, I wish that for you.\nStay Hungry. Stay Foolish.Thank you all very much.原文拷贝自Elmore’blog\n","thumbnail":"https://i.loli.net/2019/07/28/5d3dc5e1f0acc24317.jpg","plink":"https://gmahsm.github.io/post/You've Got to Find What You Love/"},{"title":"【消息中间件】(1).ActiveMQ","date":"2019-08-08T02:35:14.000Z","updated":"2019-08-14T09:24:23.082Z","content":"什么是消息中间件？\n就像快递代收点或者蜂巢。介于快递公司（操作系统）和收件人（应用程序）之间的产品。解决了送件人必须当面亲手将快递交给收件人的问题\n\n\n消息中间件的组成\nBroker\n\n消息服务器，作为server提供消息核心服务\n\nProducer\n\n消息生产者，业务的发起方，负责生产消息传输给broker，\n\nConsumer\n\n消息消费者，业务的处理方，负责从broker获取消息并进行业务逻辑处理\n\nTopic\n\n主题，发布订阅模式下的消息统一汇集地，不同生产者向topic发送消息，由MQ服务器分发到不同的订阅者，实现消息的       广播\n\nQueue\n\n队列，PTP模式下，特定生产者向特定queue发送消息，消费者订阅特定的queue完成指定消息的接收\n\nMessage\n\n消息体，根据不同通信协议定义的固定格式进行编码的数据包，来封装业务数据，实现消息的传输\nJMSJava消息服务（Java Message Service，JMS）：是Java平台上有关面向消息中间件的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发。       JMS本身只定义了一系列的接口规范，是一种与厂商无关的 API，用来访问消息收发系统。它类似JDBC(java Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。\n体系结构\n消息中间件模式分类\n点对点\n  PTP点对点:使用queue作为通信载体\n  \n\n\n说明：消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并且消费消息。消息被消费以后，queue中不再存储，所以消息消费者不可能消费到已经被消费的消息。 Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。\n\n发布订阅\n  Pub/Sub发布订阅（广播）：使用topic作为通信载体 \n  \n\n\n说明：消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费。\nqueue实现了负载均衡，将producer生产的消息发送到消息队列中，由多个消费者消费。但一个消息只能被一个消费者接受，当没有消费者可用时，这个消息会被保存直到有一个可用的消费者。topic实现了发布和订阅，当你发布一个消息，所有订阅这个topic的服务都能得到这个消息，所以从1到N个订阅者都能得到一个消息的拷贝。\n5种消息体格式JMS API定义了5种消息体格式，可以使用不同形式发送接收数据，并可兼容现有的消息格式：比如\n\nTextMessage：String对象\nMapMessage：名/值对的集合，名为String对象，值类型可以是Java任何数据类型\nBytesMessage：字节流\nStreamMessage：java中的输入输出流\nObjectMessage：Java中的可序列化对象\nMessage：没有消息体，只有消息头和属性\n\n为什么用核心的有 3 个：解耦、异步、削峰。\n1. 解耦看这么个场景。A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃……\n\n在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？头发都白了啊！\n如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。\n\n总结：通过一个 MQ，Pub/Sub 发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。\n2. 异步再来看一个场景，A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求，等待个 1s，这几乎是不可接受的。\n\n一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在 200 ms 以内完成，对用户几乎是无感知的。\n如果使用 MQ，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms，对于用户而言，其实感觉上就是点个按钮，8ms 以后就直接返回了，爽！网站做得真好，真快！\n\n3.削峰每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。\n一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。\n但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。\n\n如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。\n\n这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。\n有什么缺点1. 系统可用性降低系统引入的外部依赖越多，越容易挂掉，本来你就是A系统调用BCD三个系统的接口就好了，人ABCD四个系统好好的，没啥问题，你偏加个MQ进来，万一MQ挂了咋整？MQ挂了，整套系统崩溃了，你不就完了么。\n2. 系统复杂性提高硬生生加个MQ进来，你怎么保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已\n3. 一致性问题A系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是BCD三个系统那里，BD两个系统写库成功了，结果C系统写库失败了，咋整？你这数据就不一致了。\n所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，最好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了10倍。但是关键时刻，用，还是得用的。。。\n目前流行的消息队列优缺点对比\n\n\n特性\nActiveMQ\nRabbitMQ\nRocketMQ\nKafka\n\n\n\n单机吞吐量\n万级，吞吐量比RocketMQ和Kafka要低了一个数量级\n万级，吞吐量比RocketMQ和Kafka要低了一个数量级\n10万级，RocketMQ也是可以支撑高吞吐的一种MQ\n10万级别，这是kafka最大的优点，就是吞吐量高。 一般配合大数据类的系统来进行实时数据计算、日志采集等场景\n\n\ntopic数量对吞吐量的影响\n\n\ntopic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降,这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic\ntopic从几十个到几百个的时候，吞吐量会大幅度下降 所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源\n\n\n时效性\nms级\n微秒级，这是rabbitmq的一大特点，延迟是最低的\nms级\n延迟在ms级以内\n\n\n可用性\n高，基于主从架构实现高可用性\n高，基于主从架构实现高可用性\n非常高，分布式架构\n非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用\n\n\n消息可靠性\n有较低的概率丢失数据\n\n经过参数优化配置，可以做到0丢失\n经过参数优化配置，消息可以做到0丢失\n\n\n功能支持\nMQ领域的功能极其完备\n基于erlang开发，所以并发能力很强，性能极其好，延时很低\nMQ功能较为完善，还是分布式的，扩展性好\n功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准\n\n\n优劣势总结：\n\nActiveMQ：非常成熟，功能强大，在业内大量的公司以及项目中都有应用 偶尔会有较低概率丢失消息 而且现在社区以及国内应用都越来越少，官方社区现在对ActiveMQ 5.x维护越来越少，几个月才发布一个版本 而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用\n\nRabbitMQ：erlang语言开发，性能极其好，延时很低； 吞吐量到万级，MQ功能比较完备 而且开源提供的管理界面非常棒，用起来很好用 社区相对比较活跃，几乎每个月都发布几个版本分 在国内一些互联网公司近几年用rabbitmq也比较多一些 但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。 而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。 而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。\n\n接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障 日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景 而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控 社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码 还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的\n\nkafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展 同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量 而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略 这个特性天然适合大数据实时计算以及日志收集\n\n\n怎么用更新中…\n参考-感谢消息中间件面试题\nMQ详解及四大MQ比较\nMQ学习笔记\n","thumbnail":null,"plink":"https://gmahsm.github.io/post/【消息中间件】-1-ActiveMQ/"},{"title":"【科学上网】Vultr+Shadowsocks","date":"2019-08-01T07:06:02.000Z","updated":"2019-08-14T09:24:09.861Z","content":"之前一直使用国内付费VPN，从没动手操作过服务器。在国内VPN接连被墙后有想过使用国外的付费VPN，但是国内的环境让我有点犹豫会不会突然哪天有GG了，所以一直没有使用。转机出现是在自学JAVA的过程中了解到了VPS，这让我决定折腾一下。下面就是整个搭建过程。\n\n\n购买VPS服务器这一步比较像你办了张储值卡（注册账户并充值），然后用储值卡里的钱买了一台电脑。只不过这台电脑“看得见摸不到”\n第一次接触这件事，购买之前查查评测和推荐很有必要！至少能扫扫盲，躲避明显的大坑。下面是一些评测和推荐\n\n\n适合搭建SSR的国外VPS服务器推荐\n2019最好的国外VPS推荐\n2019优质VPS服务商推荐\n\n\n如果不想看或者看完之后还是纠结不知道选哪个！那根据我的使用，推荐使用Vultr。\n理由也比较简单：试错成本低。Vultr可以随时部署随时摧毁服务器，是按每小时计费的，一个月是5美金，大概0.007美金一小时，就算你创建一个服务器IP刚好是被某墙屏蔽了，那就删掉也只是扣0.1美金。\n1、注册并登录Vultr注册：https://my.vultr.com/\n注册登录后，使用支付宝给账户充值，支付宝要最低10美金，相当于人民币70块钱左右。\n\n2、部署服务器\n在个人页面点击Products然后再点右面的➕号按钮添加一个服务器\n\n\n\n在打开的页面选择新加坡（Singapore）服务器 (实际使用网速良好) ，如果喜欢其他服务器也可以选择，后续操作是一样一样的\n\n\n\n接下来要注意了，系统最好选择CentOS 6，方便之后在网上搜索教程和一键脚本的适配，点击CentOS可以下拉选择6。\n\n\n\n选择套餐，当然ss不需要配置太高的服务器，最低配置5美金一个月的就可以。\n\n\n\n接着就是部署起来了，当然你也可以给服务器起个名字再部署\n\n\n\n接着等待服务器启动完成，看到Status是绿色的Running就是启动完成了，这个过程大概需要1-3分钟。\n\n\n\n点击进入，查看服务器信息。后面用到IP地址和密码时可以来这里复制。\n\n\n\n启动完成后，当然测试一下有没有被封掉IP了，打开命令管理器或者终端，输入 ping+你的IP地址，例如我服务器IP是8.8.8.8，则ping 8.8.8.8，如果出现下图的返回信息则这个IP是可以用的，偶尔一个request timeout也是可以的，是掉包现象，如果出现一直request timeout就把这服务器删掉重新部署吧。\n\n图中往返行程时间实际体验是可以的，正常使用不会很慢，如果时间是二三百毫秒同样建议销毁服务器重新部署\n\n在服务器安装ss（Shadowsocks服务器端）Shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端程序部署到服务器上面，然后通过客户端连接并创建本地代理。\n1、连接服务器\nwindows10,可以打开系统自带的powershell工具，输入ssh root@你的服务器IP地址\n\n\n\n如果连接成功，那跳过”ssh工具安装“这个步骤，如果连接失败则需要另外安装ssh工具\n\n\n安装并运行SecureCRT\n\nwindows下ssh连接需要下载连接工具，根据个人习惯选择，这里以SecureCRT为例，\n\n\n安装好SecureCRT后点击File–Quick Connect\n\n\n配置连接\n\n\n弹出窗口输入服务器密码（可以去服务器详情页复制）\n\n\n上面登录成功后如图所示\n\n\n如果服务器可以ping通，但SecureCRT无法连接说明服务器被封端口了（很多vultr日本服务器有这种状况），请更换其他地区服务器或者更换服务器商\n\n\n\n\n\n2、安装ss服务端\n复制一键安装脚本到SecureCRT执行（感谢@teddysun大佬制作的一键安装脚本）\n\n123wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.shchmod +x shadowsocks-all.sh./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log\n\n\n蹦出一大串代码后，停在这里了。按回车继续\n\n\n\n接着又蹦出些东西，是让我们选择ss的服务器端，这里我选择go版本的，输入3按回车\n\n\n\n接下来是要填入ss客户端登录的密码\n\n\n\n接下来是输入端口号（1-65535任意数字），这里我填默认的\n\n\n\n接下来是选择加密方式，默认就好，按回车\n\n\n\n继续回车\n\n\n\n等待一会，看到下图就是大功告成了（图里的信息在配置ss客户端的时候会用到，可以截图备忘一下）\n\n\n3、安装ss客户端各终端下载地址：\nWindows：https://github.com/shadowsocks/shadowsocks-windows/releases\nMAC:https://github.com/shadowsocks/ShadowsocksX-NG/releases\nAndroid:https://github.com/shadowsocks/shadowsocks-android/releases\nLinux:https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation\niOS：（待更新）\n以Windows为例演示安装使用，打开上面的下载地址\n\n接着解压后打开Shadowsocks.exe，右击右下角小飞机，点击服务器-编辑服务器：\n\n还记得上面建议保存的图片吗？这里就用到了，服务器IP，端口，密码，加密方式，然后点击确定\n\n最后确保打开了PAC模式：\n\n\nPAC模式：就是访问国内网站会走国内IP，访问被封的网站走服务器IP\n全局模式：就是全部走服务器IP\n\n最后在浏览器中输入：www.google.com\n\n大功告成！！！\n参考-感谢给小白的ss翻墙教程\nVultr搭建SS\n浅谈vpn、vps、Proxy以及shadowsocks之间的联系和区别\n","thumbnail":null,"plink":"https://gmahsm.github.io/post/【科学上网】Vultr-Shadowsocks/"},{"title":"如何搜索","date":"2019-07-31T10:35:51.000Z","updated":"2019-07-31T10:53:44.337Z","content":"提高自己的检索效率，更快找到自己想找的信息\n\n\n信息搜索\n搜索逻辑\n\n了解一下其他人的解决方案。比如公司年会，新闻发布会，旅游攻略，美食攻略，社群线下活动。别人已经做过，或者经历过的事情都可以按照这个逻辑\n了解一个问题的全网信息。比如：搜索“历史比价”就会搜到“慢慢买”这个垂直网站。\n了解一下相关手机垂直服务。比如挂号，识花，便签，时间管理，学习等等\n\n\n搜索命令\n\n口语化搜索转化为关键词搜索\n\n示例：如何将iPhone手机中的图片传入电脑。优化成：iphone手机图片 上传电脑\n\n\n限定在特定的网站中。用法：关键词+空格+site:搜索范围所限定的站点。不用加www或者http\n\n限定文件类型。用法：关键词+空格+filetype:文件格式\n\n不包含某关键词。用法：关键词+空格+减号+关键词\n\n特定时间内的关键词信息。用法：关键词+20xx..20xx。限定时间用两个英文句号隔开，不是中文\n\n将关键词限定在标题中。用法：关键字+空格+intitle:需要限定的关键词\n\n将搜索内容不分词搜索。用法：用引号把搜索关键词括起来\n\n模糊搜索。用法：用“星号”替换记不清的内容，再用引号括起来\n以上指令可以组合使用\n\n\n\n\n资源搜索\n搜索心法\n\n遇到资源问题，先百度再淘宝，不行再问知乎\n\n上面的百度，淘宝和知乎是带只。核心技巧是结合之前的信息搜索技巧在搜索引擎上搜索，找不到再去看一些付费渠道，都搞不定最后去找专家咨询\n\n\n\n\n高级信息搜索的8步\n\n分析问题\n\n选择合适的搜索工具\n\n提取关键词\n\n构造检索式\n\n进行检索\n\n筛选检索结果\n\n调整检索策略\n\n反思总结\n\n核心技巧：搜索引擎是机器，不是人。不要问搜索引擎问题，应当思考我如何描述，可以让他更准确的匹配出所需要的资源\n\n\n\n\n\n","thumbnail":null,"plink":"https://gmahsm.github.io/post/如何搜索/"},{"title":"【Hexo博客攻略】(2).Inside主题配置","date":"2019-07-27T23:19:31.000Z","updated":"2019-07-28T11:19:03.806Z","content":"这次安装的主题是 inside，你也可以选择一个自己喜欢的主题，配置过程大同小异\n\n\n下载主题下载地址：https://github.com/ikeq/hexo-theme-inside\n使用主题我下载的是zip压缩包\n\n解压并重命名主题为 inside\n打开主题文件夹，找到_config.yml 文件，该文件为站点配置文件\n打开_config.yml 文件，将主题修改为 inside。theme: inside（这里配置的主题名一定要和主题文件的名称完全一致）\n\n配置主题主题配置文档：https://blog.oniuo.com/theme-inside\n\n官方的配置文档非常详细，按照自己的喜好一步步操作就可以\n\n部署到服务器cd到blog文件夹下，执行如下命令\n1hexo d -g","plink":"https://gmahsm.github.io/post/【Hexo博客攻略】(2).Inside主题配置/"},{"title":"用Typora写Markdown","date":"2019-07-27T05:23:27.000Z","updated":"2019-08-01T05:34:07.848Z","content":"电脑系统windows，内容主要是Markdown语法和软件快捷键，常用整理\nMarkdown ：是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。\nTypora：markdown编辑器。官网：https://www.typora.io\n\n\n语法与快捷键汇总生成目录1[toc] + enter\n\n标题123456# 一阶标题  或者快捷键Ctrl+1## 二阶标题 或者快捷键Ctrl+2### 三阶标题    或者快捷键Ctrl+3#### 四阶标题   或者快捷键Ctrl+4##### 五阶标题  或者快捷键Ctrl+5###### 六阶标题 或者快捷键Ctrl+6\n\n下划线1&lt;u&gt;下划线的内容&lt;/u&gt; 或者快捷键Ctrl+U\n\n斜体12*倾斜内容*_倾斜内容_    或按快捷键Ctrl+I\n\n加粗12**加粗内容**__加粗内容__    或按快捷键Ctrl+B\n\n加粗斜体12***加粗内容***___加粗内容___\n\n删除线1~~删除线的内容~~  或按快捷键Alt+Shift+5\n\n==文字高亮==1==我是最重要的==\n\n角标^1^ 角标21x^2^  上角标   H~2~O  下角标    不是Markdown语法\n\n文本居中1&lt;center&gt;这是要居中的文本内容&lt;/center&gt;\n\n引用1&gt;+空格    或按快捷键ctrl + shift + q\n\n分割线12***+回车  ---+回车    个人习惯“减号”\n\n有序列表1数字+英文小数点(.)+空格\n\n无序列表1+ 、- 、* 任意一种+空格    个人习惯“减号”\n\n代码片段1`代码内容`\n\n代码块1​```+回车    或者快捷键Ctrl+Shift+K\n\n超链接12345673种样式[百度][https://www.baidu.com/]    或者快捷键Ctrl+K     使用频率高[CSDN][CSDN网址][CSDN网址]:https://www.csdn.net/&lt;https://github.com/&gt;\n\n图片1![图片名](网络地址)\n\n表格1234|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |    或者快捷键Ctrl+T\n\n注脚12Typora[^1][^1]:A markdown editor\n\n任务列表123-[ ] 抽烟-[x] 喝酒-[ ] 烫头\n\n符号输入123456789101112\\\\   反斜线\\`   反引号\\*   星号\\_   底线\\&#123; \\&#125;  花括号\\[ \\]  方括号\\( \\)  括弧\\#   井字号\\+   加号\\-   减号\\.   英文句点\\!   惊叹号\n\n特殊符号1234567891011121314151617181920&amp;copy;      版权      &amp;reg;       注册商标&amp;trade;     商标&amp;nbsp;      空格&amp;amp;       和号&amp;quot;      引号&amp;apos;      撇号&amp;lt;        小于号&amp;gt;        大于号&amp;ne;        不等号&amp;le;        小于等于&amp;ge;        大于等于&amp;cent;      分&amp;pound;     磅&amp;euro;      欧元&amp;yen;       元&amp;sect;      节&amp;times;     乘号&amp;divide;    除号&amp;plusmn;    正负号\n\n参考-感谢Typora-书写即为美学\nMarkdown 教程\n使用Markdown快速排版一篇文章\n","plink":"https://gmahsm.github.io/post/用Typora写Markdown/"},{"title":"博客图片不显示","date":"2019-07-24T23:25:12.000Z","updated":"2019-07-28T12:57:49.435Z","content":"为什么图片不显示了？\n本地使用Markdown编辑博客时，图片的引用使用的是本地相对地址。因为图片一直存放在本地的某个文件夹，所以将博客部署到github后引用地址找不到图片文件。\n\n\n有两种解决方法：\n\n配置Hexo\n使用图床工具\n\n配置Hexo\n将hexo配置文件_config.yml 中post_asset_folder设置成true。\n\n这是Hexo的资源文件夹功能，默认是关闭的。设置完成后，再次新建文件时，Hexo会自动建立一个与文章同名的文件夹，可以把与该文章相关的所有资源都放到那个文件夹，\n\n\n安装一个图片插件，\n 在hexo的目录下执行下面命令\n\n\n1npm install https://github.com/CodeFalling/hexo-asset-image --save\n\n​        效果如下图：\n\n\n博客插入图片方式\n\n![图片标题](文章同名文件夹/图片名称.jpg)\n使用图床工具\n下载图床工具 PicGo\n\n设置picgo\n\n设置链接格式，方便插入\n\n\n设置图床，第一次使用直接使用默认的sm.ms即可\n\n\n\n\n使用picgo\n\n找到要插入的图片 Ctrl+C （复制图片）\n上传图片到图床 Ctrl+Shift+P （默认快捷键，自定义快捷键方法请查看官方文档）\n在文章中插入图片 Ctrl+V （工具会以上面设置的链接格式输出到文档\n\n 注意：\n\n方法适用于单张图片的上传、使用。\n批量上传图片可以选中多张图片后拖到上传区，但使用图片需要在工具相册中找到图片并复制图片链接再插入到文章    \n\n\n\n\n更详细的配置和使用可以查看官方配置文档\n\n最后说经过使用发现，方法一缺点很明显：大量占用github pages空间。用《使用hexo-github搭建个人博客》和《博客图片不显示》两篇文做设置对比，使用方法一占用github空间 5.5M，而使用方法二仅占用github空间 390K。面对有限的github pages免费空间，方法二优势是碾压的。\n​    \n","plink":"https://gmahsm.github.io/post/博客图片不显示/"},{"title":"【Hexo博客攻略】(1).基于hexo-github环境搭建","date":"2019-07-24T16:04:43.000Z","updated":"2019-07-28T11:19:15.543Z","content":"注册账号地址：https://github.com\n创建GitHub page\ngithub page的域名形式是固定的\n\n测试\n安装git for windows下载地址：https://gitforwindows.org/。或者搜索 “git for win“\n\n默认选项安装即可安装路径根据自己使用习惯设置\n测试在命令行窗口输入 git 命令，如下图所示即为安装成功\n\n安装node.js下载地址：https://nodejs.org/en/。或者百度搜索 “node.js”\n下载左面的稳定版本\n\n默认选项安装即可安装路径根据自己使用习惯设置\n测试在命令行窗口使用”node -v”命令，显示版本号表示安装成功。如下图\n\nhexo本地使用地址：https://hexo.io/zh-cn/。或者百度搜索&quot;hexo&quot;，即可搜索到安装指令。\n\n安装在d盘新建文件夹’blog’(用户自定义)，使用命令行进入blog文件夹\n12345$  npm install hexo-cli -g    安装hexo$  hexo init blog             初始化该文件夹$  cd blog                    进入初始化完成的文件夹$  npm install\t\t\t\t   安装依赖（所需要的组件）$  hexo s             开启服务器（默认端口：4000，如果端口冲突可以使用 hexo s -p xxx自定义端口\n\n按照顺序依次执行上面指令。完成后访问localhost:4000(端口)。访问到页面表示安装成功。\n参照\n\n成功后访问页面\n将Hexo与github page联系起来git bash：在windows系统下使用git命令的模拟终端（windows自带的cmd功能太弱)\n\n进入blog文件夹，右键，Git Base Here，然后执行登录命令\n\n 12git config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱&quot;\n\n\n在命令行或终端中使用下面的命令设置git自己的名字和电子邮件。这是因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。\n\n效果如下：\n\n本地git与github之间需要通过ssh密钥来连接，需先生成一个密钥，命令如下：\n\n1ssh-keygen -t rsa -C &quot;邮箱&quot;\n\n\n 中间会遇到停顿 ，输入“回车”默认即可，（参考链接：ssh代理详解）\n\n\n\n进入文件夹C:\\Users\\Administrator.ssh，会看到得到的两个文件：\n\n\n\nid_rsa是私钥， id_rsa.pub是密钥\n\n\nssh代理\n\n12eval &quot;$(ssh-agent -s)&quot;\t启动ssh代理ssh-agentssh-add ~/.ssh/id_rsa\t将私钥添加到ssh代理\n\n\nssh代理是一个程序，它可以帮助我们管理私钥，ssh- agent即为ssh代理程序那么什么时候需要ssh代理帮助我们管理私钥呢？当遇到如下情况时，我们会需要ssh代理。    1、不用到处部署私钥使用不同的密钥连接到不同的主机时，需要手动指定对应的密钥，ssh代理可以帮助我们选择对应的密钥进行认证，不用手动指定密钥即可进行连接。    2、不用重复输入密码 当私钥设置了密码，我们又需要频繁的使用私钥进行认证时，ssh代理可以帮助我们免去重复的输入密码的操作。\n\n\n登陆github，点击头像下的settings，添加ssh:\n\n\n\n新建new ssh key，将id_rsa.pub(记事本打开即可)文件里的内容复制进去：\n\n\n\n执行以下指令，测试添加ssh是否成功\n\n1ssh -T git@github.com\n\n​    看到红框标注是自己的用户名表示添加成功\n\n\n进入blog文件夹，找到_config.yml配置文件，修改下面两处\n\n\n\n\n yml对缩进和空格要求很严格，每个英文冒号后面必须有一个空格，该缩进的地方必须要有缩进（比如图2的后三行代码）：\n\n\n创建博客\n  直接使用Markdown编辑器编辑文章，然后存入blog文件夹下的source_posts文件夹；\n 然后执行以下命令\n\n\n12npm install hexo-deployer-git --save\t\t安装hexo-deployer-git扩展插件 hexo d -g\t\t生成静态页面并部署到github上\n\n浏览器访问http://用户名.github.io\n参考链接：hexo官方文档\n搭建步骤参考\nssh代理详解\n","plink":"https://gmahsm.github.io/post/【Hexo博客攻略】(1).基于hexo-github环境搭建/"}]