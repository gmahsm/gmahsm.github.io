{"title":"【SpringMVC】文件上传&拦截器&异常处理","date":"2019-09-03T03:53:49.000Z","thumbnail":null,"link":"post/【SpringMVC】文件上传-拦截器-异常处理","tags":["SpringMVC"],"categories":["奇客工具"],"updated":"2019-09-03T03:54:34.843Z","content":"<h1 id=\"SpringMVC的文件上传\">SpringMVC的文件上传<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#SpringMVC的文件上传\"></a></h1><h3 id=\"1-SpringMVC的请求-文件上传-客户端表单实现-应用\">1-SpringMVC的请求-文件上传-客户端表单实现(应用)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#1-SpringMVC的请求-文件上传-客户端表单实现-应用\"></a></h3><p>文件上传客户端表单需要满足：</p>\n<p>表单项type=“file”</p>\n<p>表单的提交方式是post</p>\n<p>表单的enctype属性是多部分表单形式，及enctype=“multipart/form-data”</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/user/quick22\"</span> method=<span class=\"string\">\"post\"</span> enctype=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span><br><span class=\"line\">        名称&lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"username\"</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">        文件<span class=\"number\">1</span>&lt;input type=<span class=\"string\">\"file\"</span> name=<span class=\"string\">\"uploadFile\"</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"提交\"</span>&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"2-SpringMVC的请求-文件上传-文件上传的原理-理解\">2-SpringMVC的请求-文件上传-文件上传的原理(理解)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#2-SpringMVC的请求-文件上传-文件上传的原理-理解\"></a></h3><p><img src=\"https://i.loli.net/2019/09/03/kbnPC9KdDJraGWI.jpg\" alt class=\"article-img\"></p>\n<h3 id=\"3-SpringMVC的请求-文件上传-单文件上传的代码实现1-应用\">3-SpringMVC的请求-文件上传-单文件上传的代码实现1(应用)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#3-SpringMVC的请求-文件上传-单文件上传的代码实现1-应用\"></a></h3><p>添加依赖</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>配置多媒体解析器</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置文件上传解析器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"multipartResolver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UYF-8\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxUploadSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"500000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>后台程序</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick22\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save22</span><span class=\"params\">(String username, MultipartFile uploadFile)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(username);</span><br><span class=\"line\">       \tSystem.out.println(uploadFile);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"4-SpringMVC的请求-文件上传-单文件上传的代码实现2-应用\">4-SpringMVC的请求-文件上传-单文件上传的代码实现2(应用)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#4-SpringMVC的请求-文件上传-单文件上传的代码实现2-应用\"></a></h3><p>完成文件上传</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick22\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save22</span><span class=\"params\">(String username, MultipartFile uploadFile)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(username);</span><br><span class=\"line\">        <span class=\"comment\">//获得上传文件的名称</span></span><br><span class=\"line\">        String originalFilename = uploadFile.getOriginalFilename();</span><br><span class=\"line\">        uploadFile.transferTo(<span class=\"keyword\">new</span> File(<span class=\"string\">\"C:\\\\upload\\\\\"</span>+originalFilename));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"5-SpringMVC的请求-文件上传-多文件上传的代码实现-应用\">5-SpringMVC的请求-文件上传-多文件上传的代码实现(应用)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#5-SpringMVC的请求-文件上传-多文件上传的代码实现-应用\"></a></h3><p>多文件上传，只需要将页面修改为多个文件上传项，将方法参数MultipartFile类型修改为MultipartFile[]即可</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/user/quick23\"</span> method=<span class=\"string\">\"post\"</span> enctype=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span><br><span class=\"line\">        名称&lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"username\"</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">        文件<span class=\"number\">1</span>&lt;input type=<span class=\"string\">\"file\"</span> name=<span class=\"string\">\"uploadFile\"</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">        文件<span class=\"number\">2</span>&lt;input type=<span class=\"string\">\"file\"</span> name=<span class=\"string\">\"uploadFile\"</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"提交\"</span>&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick23\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save23</span><span class=\"params\">(String username, MultipartFile[] uploadFile)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(username);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (MultipartFile multipartFile : uploadFile) &#123;</span><br><span class=\"line\">            String originalFilename = multipartFile.getOriginalFilename();</span><br><span class=\"line\">            multipartFile.transferTo(<span class=\"keyword\">new</span> File(<span class=\"string\">\"C:\\\\upload\\\\\"</span>+originalFilename));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"6-SpringMVC的请求-知识要点-理解，记忆\">6-SpringMVC的请求-知识要点(理解，记忆)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#6-SpringMVC的请求-知识要点-理解，记忆\"></a></h3><p><img src=\"https://i.loli.net/2019/09/03/7bkivHnsUXpI5hw.jpg\" alt class=\"article-img\"></p>\n<h1 id=\"SpringMVC的拦截器\">SpringMVC的拦截器<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#SpringMVC的拦截器\"></a></h1><h2 id=\"01-SpringMVC拦截器-拦截器的作用-理解\">01-SpringMVC拦截器-拦截器的作用(理解)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#01-SpringMVC拦截器-拦截器的作用-理解\"></a></h2><p>Spring MVC 的拦截器类似于 Servlet  开发中的过滤器 Filter，用于对处理器进行预处理和后处理。</p>\n<p>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链（InterceptorChain）。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。拦截器也是AOP思想的具体实现。</p>\n<h2 id=\"02-SpringMVC拦截器-interceptor和filter区别-理解，记忆\">02-SpringMVC拦截器-interceptor和filter区别(理解，记忆)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#02-SpringMVC拦截器-interceptor和filter区别-理解，记忆\"></a></h2><p>关于interceptor和filter的区别，如图所示：</p>\n<p><img src=\"https://i.loli.net/2019/09/03/O6zx8tmRVJh5BIf.png\" alt class=\"article-img\"></p>\n<h2 id=\"03-SpringMVC拦截器-快速入门-应用\">03-SpringMVC拦截器-快速入门(应用)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#03-SpringMVC拦截器-快速入门-应用\"></a></h2><p>自定义拦截器很简单，只有如下三步：</p>\n<p>①创建拦截器类实现HandlerInterceptor接口</p>\n<p>②配置拦截器</p>\n<p>③测试拦截器的拦截效果</p>\n<p>编写拦截器：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterceptor1</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在目标方法执行之前 执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"preHandle.....\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"comment\">//在目标方法执行之后 视图对象返回之前执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"postHandle...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//在流程都执行完毕后 执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"afterCompletion....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>配置：在SpringMVC的配置文件中配置</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置拦截器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/**\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.itheima.interceptor.MyInterceptor1\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>编写测试程序测试：</p>\n<p>编写Controller,发请求到controller,跳转页面</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TargetController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/target\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"目标资源执行......\"</span>);</span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"itcast\"</span>);</span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"index\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>页面</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h2&gt;Hello World! $&#123;name&#125;&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"04-SpringMVC拦截器-快速入门详解-应用\">04-SpringMVC拦截器-快速入门详解(应用)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#04-SpringMVC拦截器-快速入门详解-应用\"></a></h2><p>拦截器在预处理后什么情况下会执行目标资源，什么情况下不执行目标资源，以及在有多个拦截器的情况下拦截器的执行顺序是什么?</p>\n<p>再编写一个拦截器2，</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterceptor2</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在目标方法执行之前 执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"preHandle22222.....\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//在目标方法执行之后 视图对象返回之前执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"postHandle2222...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//在流程都执行完毕后 执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"afterCompletion2222....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>配置拦截器2</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置拦截器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/**\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.itheima.interceptor.MyInterceptor2\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/**\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.itheima.interceptor.MyInterceptor1\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>结论：</p>\n<p>当拦截器的preHandle方法返回true则会执行目标资源，如果返回false则不执行目标资源</p>\n<p>多个拦截器情况下，配置在前的先执行，配置在后的后执行</p>\n<p>拦截器中的方法执行顺序是：preHandler——-目标资源—-postHandle—- afterCompletion</p>\n<h2 id=\"05-SpringMVC拦截器-知识小结-记忆\">05-SpringMVC拦截器-知识小结(记忆)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#05-SpringMVC拦截器-知识小结-记忆\"></a></h2><p>拦截器中的方法说明如下</p>\n<p><img src=\"https://i.loli.net/2019/09/03/x6UFnARXiwCDKlY.png\" alt class=\"article-img\"></p>\n<h2 id=\"06-SpringMVC拦截器-用户登录权限控制分析-理解\">06-SpringMVC拦截器-用户登录权限控制分析(理解)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#06-SpringMVC拦截器-用户登录权限控制分析-理解\"></a></h2><p>在day06-Spring练习案例的基础之上：用户没有登录的情况下，不能对后台菜单进行访问操作，点击菜单跳转到登录页面，只有用户登录成功后才能进行后台功能的操作</p>\n<p>需求图：</p>\n<p><img src=\"https://i.loli.net/2019/09/03/QVitBfHCN3uFjc8.jpg\" alt class=\"article-img\"></p>\n<h2 id=\"07-SpringMVC拦截器-用户登录权限控制代码实现1-应用\">07-SpringMVC拦截器-用户登录权限控制代码实现1(应用)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#07-SpringMVC拦截器-用户登录权限控制代码实现1-应用\"></a></h2><p>判断用户是否登录  本质：判断session中有没有user，如果没有登陆则先去登陆，如果已经登陆则直接放行访问目标资源</p>\n<p>先编写拦截器如下：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrivilegeInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//逻辑：判断用户是否登录  本质：判断session中有没有user</span></span><br><span class=\"line\">        HttpSession session = request.getSession();</span><br><span class=\"line\">        User user = (User) session.getAttribute(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//没有登录</span></span><br><span class=\"line\">            response.sendRedirect(request.getContextPath()+<span class=\"string\">\"/login.jsp\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//放行  访问目标资源</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>然后配置该拦截器：找到项目案例的spring-mvc.xml，添加如下配置：</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置权限拦截器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--配置对哪些资源执行拦截操作--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/**\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.itheima.interceptor.PrivilegeInterceptor\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"08-SpringMVC拦截器-用户登录权限控制代码实现2-应用\">08-SpringMVC拦截器-用户登录权限控制代码实现2(应用)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#08-SpringMVC拦截器-用户登录权限控制代码实现2-应用\"></a></h2><p>在登陆页面输入用户名密码，点击登陆，通过用户名密码进行查询，如果登陆成功，则将用户信息实体存入session，然后跳转到首页，如果登陆失败则继续回到登陆页面</p>\n<p>在UserController中编写登陆逻辑</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/login\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(String username,String password,HttpSession session)</span></span>&#123;</span><br><span class=\"line\">        User user = userService.login(username,password);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登录成功  将user存储到session</span></span><br><span class=\"line\">            session.setAttribute(<span class=\"string\">\"user\"</span>,user);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/index.jsp\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/login.jsp\"</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>service层代码如下：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//service层</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">login</span><span class=\"params\">(String username, String password)</span> </span>&#123;</span><br><span class=\"line\">            User user = userDao.findByUsernameAndPassword(username,password);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>dao层代码如下：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dao层</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findByUsernameAndPassword</span><span class=\"params\">(String username, String password)</span> <span class=\"keyword\">throws</span> EmptyResultDataAccessException</span>&#123;</span><br><span class=\"line\">        User user = jdbcTemplate.queryForObject(<span class=\"string\">\"select * from sys_user where username=? and password=?\"</span>, <span class=\"keyword\">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class), username, password);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>此时仍然登陆不上，因为我们需要将登陆请求url让拦截器放行,添加资源排除的配置</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置权限拦截器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--配置对哪些资源执行拦截操作--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/**\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--配置哪些资源排除拦截操作--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:exclude-mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/user/login\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.itheima.interceptor.PrivilegeInterceptor\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"09-SpringMVC拦截器-用户登录权限控制代码实现3-应用\">09-SpringMVC拦截器-用户登录权限控制代码实现3(应用)<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#09-SpringMVC拦截器-用户登录权限控制代码实现3-应用\"></a></h2><p>JdbcTemplate.queryForObject对象如果查询不到数据会抛异常，导致程序无法达到预期效果，如何来解决该问题？</p>\n<p>在业务层处理来自dao层的异常，如果出现异常service层返回null,而不是将异常抛给controller</p>\n<p>因此改造登陆的业务层代码,添加异常的控制</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">login</span><span class=\"params\">(String username, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findByUsernameAndPassword(username,password);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (EmptyResultDataAccessException e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"SpringMVC异常处理机制\">SpringMVC异常处理机制<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#SpringMVC异常处理机制\"></a></h1><h2 id=\"1-1-异常处理的思路\">1.1 异常处理的思路<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#1-1-异常处理的思路\"></a></h2><p>系统中异常包括两类：预期异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试等手段减少运行时异常的发生。</p>\n<p>系统的Dao、Service、Controller出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交由异常处理器进行异常处理，如下图：</p>\n<p><img src=\"https://i.loli.net/2019/09/03/SGtQ91UDda4CoFO.png\" alt class=\"article-img\"></p>\n<h2 id=\"1-2-异常处理两种方式\">1.2 异常处理两种方式<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#1-2-异常处理两种方式\"></a></h2><p>① 使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver</p>\n<p>② 实现Spring的异常处理接口HandlerExceptionResolver 自定义自己的异常处理器</p>\n<h2 id=\"1-3-简单异常处理器SimpleMappingExceptionResolver\">1.3 简单异常处理器SimpleMappingExceptionResolver<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#1-3-简单异常处理器SimpleMappingExceptionResolver\"></a></h2><p>SpringMVC已经定义好了该类型转换器，在使用时可以根据项目情况进行相应异常与视图的映射配置</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置简单映射异常处理器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">“org.springframework.web.servlet.handler.SimpleMappingExceptionResolver”</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">“defaultErrorView”</span> <span class=\"attr\">value</span>=<span class=\"string\">“error”/</span>&gt;</span>   默认错误视图</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">“exceptionMappings”</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span>\t\t异常类型\t\t                             错误视图</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"com.itheima.exception.MyException\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"error\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"java.lang.ClassCastException\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"error\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"1-4-自定义异常处理步骤\">1.4 自定义异常处理步骤<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#1-4-自定义异常处理步骤\"></a></h2><p>①创建异常处理器类实现HandlerExceptionResolver</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExceptionResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerExceptionResolver</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(HttpServletRequest request, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理异常的代码实现</span></span><br><span class=\"line\">    <span class=\"comment\">//创建ModelAndView对象</span></span><br><span class=\"line\">    ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView(); </span><br><span class=\"line\">    modelAndView.setViewName(<span class=\"string\">\"exceptionPage\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>②配置异常处理器</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"exceptionResolver\"</span>        </span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"com.itheima.exception.MyExceptionResolver\"</span>/&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>③编写异常页面</p>\n<figure class=\"highlight html\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t这是一个最终异常的显示页面</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>④测试异常跳转</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/quick22\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quickMethod22</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, ParseException </span>&#123;</span><br><span class=\"line\">    SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>); </span><br><span class=\"line\">    simpleDateFormat.parse(<span class=\"string\">\"abcde\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"1-5-知识要点\">1.5 知识要点<a href=\"post/【SpringMVC】文件上传-拦截器-异常处理#1-5-知识要点\"></a></h2><p>异常处理方式</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置简单异常处理器SimpleMappingExceptionResolver</span><br><span class=\"line\"></span><br><span class=\"line\">自定义异常处理器</span><br></pre></td></tr></table></div></figure>\n\n<p>自定义异常处理步骤</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①创建异常处理器类实现HandlerExceptionResolver</span><br><span class=\"line\"></span><br><span class=\"line\">②配置异常处理器</span><br><span class=\"line\"></span><br><span class=\"line\">③编写异常页面</span><br><span class=\"line\"></span><br><span class=\"line\">④测试异常跳转</span><br></pre></td></tr></table></div></figure>\n\n","next":{"title":"【SpringMVC】请求&响应","link":"post/【SpringMVC】请求-响应"},"plink":"https://gmahsm.github.io/post/【SpringMVC】文件上传-拦截器-异常处理/","toc":[{"title":"SpringMVC的文件上传","id":"SpringMVC的文件上传","index":"1"},{"title":"SpringMVC的拦截器","id":"SpringMVC的拦截器","index":"2","children":[{"title":"01-SpringMVC拦截器-拦截器的作用(理解)","id":"01-SpringMVC拦截器-拦截器的作用-理解","index":"2.1"},{"title":"02-SpringMVC拦截器-interceptor和filter区别(理解，记忆)","id":"02-SpringMVC拦截器-interceptor和filter区别-理解，记忆","index":"2.2"},{"title":"03-SpringMVC拦截器-快速入门(应用)","id":"03-SpringMVC拦截器-快速入门-应用","index":"2.3"},{"title":"04-SpringMVC拦截器-快速入门详解(应用)","id":"04-SpringMVC拦截器-快速入门详解-应用","index":"2.4"},{"title":"05-SpringMVC拦截器-知识小结(记忆)","id":"05-SpringMVC拦截器-知识小结-记忆","index":"2.5"},{"title":"06-SpringMVC拦截器-用户登录权限控制分析(理解)","id":"06-SpringMVC拦截器-用户登录权限控制分析-理解","index":"2.6"},{"title":"07-SpringMVC拦截器-用户登录权限控制代码实现1(应用)","id":"07-SpringMVC拦截器-用户登录权限控制代码实现1-应用","index":"2.7"},{"title":"08-SpringMVC拦截器-用户登录权限控制代码实现2(应用)","id":"08-SpringMVC拦截器-用户登录权限控制代码实现2-应用","index":"2.8"},{"title":"09-SpringMVC拦截器-用户登录权限控制代码实现3(应用)","id":"09-SpringMVC拦截器-用户登录权限控制代码实现3-应用","index":"2.9"}]},{"title":"SpringMVC异常处理机制","id":"SpringMVC异常处理机制","index":"3","children":[{"title":"1.1 异常处理的思路","id":"1-1-异常处理的思路","index":"3.1"},{"title":"1.2 异常处理两种方式","id":"1-2-异常处理两种方式","index":"3.2"},{"title":"1.3 简单异常处理器SimpleMappingExceptionResolver","id":"1-3-简单异常处理器SimpleMappingExceptionResolver","index":"3.3"},{"title":"1.4 自定义异常处理步骤","id":"1-4-自定义异常处理步骤","index":"3.4"},{"title":"1.5 知识要点","id":"1-5-知识要点","index":"3.5"}]}],"reward":true,"copyright":{"custom":"copyright:自由转载-非商用-禁止演绎-保持署名"}}