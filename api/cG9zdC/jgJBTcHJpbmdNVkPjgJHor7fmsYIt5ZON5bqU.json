{"title":"【SpringMVC】请求&响应","date":"2019-09-03T03:51:54.000Z","thumbnail":null,"link":"post/【SpringMVC】请求-响应","categories":["奇客工具"],"updated":"2019-09-03T03:52:52.829Z","content":"<h1 id=\"SpringMVC的请求和响应\">SpringMVC的请求和响应<a href=\"post/【SpringMVC】请求-响应#SpringMVC的请求和响应\"></a></h1><h2 id=\"SpringMVC的数据响应\">SpringMVC的数据响应<a href=\"post/【SpringMVC】请求-响应#SpringMVC的数据响应\"></a></h2><h3 id=\"01-SpringMVC的数据响应-数据响应方式-理解\">01-SpringMVC的数据响应-数据响应方式(理解)<a href=\"post/【SpringMVC】请求-响应#01-SpringMVC的数据响应-数据响应方式-理解\"></a></h3><p>1)    页面跳转</p>\n<p>直接返回字符串</p>\n<p>通过ModelAndView对象返回</p>\n<p>2） 回写数据 </p>\n<p>直接返回字符串</p>\n<p>返回对象或集合    </p>\n<h3 id=\"02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）\">02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）<a href=\"post/【SpringMVC】请求-响应#02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）\"></a></h3><p><img src=\"https://i.loli.net/2019/09/03/tkvO3rD98LQZgwS.jpg\" alt class=\"article-img\"></p>\n<h3 id=\"03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1-应用\">03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1(应用)<a href=\"post/【SpringMVC】请求-响应#03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1-应用\"></a></h3><p>在Controller中方法返回ModelAndView对象，并且设置视图名称</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick2\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">save2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            Model:模型 作用封装数据</span></span><br><span class=\"line\"><span class=\"comment\">            View：视图 作用展示数据</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">//设置模型数据</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"username\"</span>,<span class=\"string\">\"itcast\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置视图名称</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2-应用\">04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2(应用)<a href=\"post/【SpringMVC】请求-响应#04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2-应用\"></a></h3><p>n在Controller中方法形参上直接声明ModelAndView，无需在方法中自己创建，在方法中直接使用该对象设置视图，同样可以跳转页面</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick3\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">save3</span><span class=\"params\">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"username\"</span>,<span class=\"string\">\"itheima\"</span>);</span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick4\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">save4</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"username\"</span>,<span class=\"string\">\"博学谷\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"05-SpringMVC的数据响应-页面跳转-返回ModelAndView3-应用\">05-SpringMVC的数据响应-页面跳转-返回ModelAndView3(应用)<a href=\"post/【SpringMVC】请求-响应#05-SpringMVC的数据响应-页面跳转-返回ModelAndView3-应用\"></a></h3><p>在Controller方法的形参上可以直接使用原生的HttpServeltRequest对象，只需声明即可</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick5\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">save5</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">\"username\"</span>,<span class=\"string\">\"酷丁鱼\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"06-SpringMVC的数据响应-回写数据-直接回写字符串-应用\">06-SpringMVC的数据响应-回写数据-直接回写字符串(应用)<a href=\"post/【SpringMVC】请求-响应#06-SpringMVC的数据响应-回写数据-直接回写字符串-应用\"></a></h3><p>通过SpringMVC框架注入的response对象，使用response.getWriter().print(“hello world”) 回写数据，此时不需要视图跳转，业务方法返回值为void</p>\n<p>将需要回写的字符串直接返回，但此时需要通过@ResponseBody注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick7\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span>  <span class=\"comment\">//告知SpringMVC框架 不进行视图跳转 直接进行数据响应</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">save7</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello itheima\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick6\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save6</span><span class=\"params\">(HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        response.getWriter().print(<span class=\"string\">\"hello itcast\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"07-SpringMVC的数据响应-回写数据-直接回写json格式字符串-应用\">07-SpringMVC的数据响应-回写数据-直接回写json格式字符串(应用)<a href=\"post/【SpringMVC】请求-响应#07-SpringMVC的数据响应-回写数据-直接回写json格式字符串-应用\"></a></h3><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick8\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">save8</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;\\\"username\\\":\\\"zhangsan\\\",\\\"age\\\":18&#125;\"</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>手动拼接json格式字符串的方式很麻烦，开发中往往要将复杂的java对象转换成json格式的字符串，我们可以使用web阶段学习过的json转换工具jackson进行转换,通过jackson转换json格式字符串，回写字符串</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick9\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">save9</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setUsername(<span class=\"string\">\"lisi\"</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">30</span>);</span><br><span class=\"line\">        <span class=\"comment\">//使用json的转换工具将对象转换成json格式字符串在返回</span></span><br><span class=\"line\">        ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        String json = objectMapper.writeValueAsString(user);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> json;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"08-SpringMVC的数据响应-回写数据-返回对象或集合-应用\">08-SpringMVC的数据响应-回写数据-返回对象或集合(应用)<a href=\"post/【SpringMVC】请求-响应#08-SpringMVC的数据响应-回写数据-返回对象或集合-应用\"></a></h3><p>通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数，指定使用jackson进行对象或集合的转换，因此需要在spring-mvc.xml中进行如下配置：</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"messageConverters\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick10\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"comment\">//期望SpringMVC自动将User转换成json格式的字符串</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">save10</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setUsername(<span class=\"string\">\"lisi2\"</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">32</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"09-SpringMVC的数据响应-回写数据-返回对象或集合2-应用\">09-SpringMVC的数据响应-回写数据-返回对象或集合2(应用)<a href=\"post/【SpringMVC】请求-响应#09-SpringMVC的数据响应-回写数据-返回对象或集合2-应用\"></a></h3><p>在方法上添加@ResponseBody就可以返回json格式的字符串，但是这样配置比较麻烦，配置的代码比较多，因此，我们可以使用mvc的注解驱动代替上述配置</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。</p>\n<p>使用<code>&lt;mvc:annotation-driven /&gt;</code>自动加载 RequestMappingHandlerMapping（处理映射器）和</p>\n<p>RequestMappingHandlerAdapter（ 处 理 适 配 器 ），可用在Spring-xml.xml配置文件中使用</p>\n<p><code>&lt;mvc:annotation-driven /&gt;</code>替代注解处理器和适配器的配置。</p>\n<p>同时使用<code>&lt;mvc:annotation-driven /&gt;</code></p>\n<p>默认底层就会集成jackson进行对象或集合的json格式字符串的转换</p>\n<h3 id=\"10-SpringMVC的数据响应-知识要点小结-理解，记忆\">10-SpringMVC的数据响应-知识要点小结(理解，记忆)<a href=\"post/【SpringMVC】请求-响应#10-SpringMVC的数据响应-知识要点小结-理解，记忆\"></a></h3><p>1） 页面跳转</p>\n<p>直接返回字符串</p>\n<p>通过ModelAndView对象返回</p>\n<p>2） 回写数据 </p>\n<p>直接返回字符串</p>\n<p>HttpServletResponse 对象直接写回数据，HttpServletRequest对象带回数据，Model对象带回数据或者@ResponseBody将字符串数据写回</p>\n<p>返回对象或集合 </p>\n<p>@ResponseBody+<code>&lt;mvc:annotation-driven/&gt;</code></p>\n<h2 id=\"SpringMVC的请求\">SpringMVC的请求<a href=\"post/【SpringMVC】请求-响应#SpringMVC的请求\"></a></h2><h3 id=\"11-SpringMVC的请求-获得请求参数-请求参数类型-理解\">11-SpringMVC的请求-获得请求参数-请求参数类型(理解)<a href=\"post/【SpringMVC】请求-响应#11-SpringMVC的请求-获得请求参数-请求参数类型-理解\"></a></h3><p>客户端请求参数的格式是：name=value&amp;name=value……</p>\n<p>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收如下类型的参数</p>\n<p>基本类型参数</p>\n<p>POJO类型参数</p>\n<p>数组类型参数</p>\n<p>集合类型参数</p>\n<h3 id=\"12-SpringMVC的请求-获得请求参数-获得基本类型参数-应用\">12-SpringMVC的请求-获得请求参数-获得基本类型参数(应用)<a href=\"post/【SpringMVC】请求-响应#12-SpringMVC的请求-获得请求参数-获得基本类型参数-应用\"></a></h3><p>Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配。并且能自动做类型转换；</p>\n<p>自动的类型转换是指从String向其他类型的转换</p>\n<p><code>http://localhost:8080/itheima_springmvc1/quick9?username=zhangsan&amp;age=12</code></p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick11\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save11</span><span class=\"params\">(String username,<span class=\"keyword\">int</span> age)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(username);</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"13-SpringMVC的请求-获得请求参数-获得POJO类型参数-应用\">13-SpringMVC的请求-获得请求参数-获得POJO类型参数(应用)<a href=\"post/【SpringMVC】请求-响应#13-SpringMVC的请求-获得请求参数-获得POJO类型参数-应用\"></a></h3><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配。</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"User&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"username='\"</span> + username + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", age=\"</span> + age +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick12\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save12</span><span class=\"params\">(User user)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"14-SpringMVC的请求-获得请求参数-获得数组类型参数-应用\">14-SpringMVC的请求-获得请求参数-获得数组类型参数(应用)<a href=\"post/【SpringMVC】请求-响应#14-SpringMVC的请求-获得请求参数-获得数组类型参数-应用\"></a></h3><p>Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配。</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick13\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save13</span><span class=\"params\">(String[] strs)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(Arrays.asList(strs));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"15-SpringMVC的请求-获得请求参数-获得集合类型参数1-应用\">15-SpringMVC的请求-获得请求参数-获得集合类型参数1(应用)<a href=\"post/【SpringMVC】请求-响应#15-SpringMVC的请求-获得请求参数-获得集合类型参数1-应用\"></a></h3><p>获得集合参数时，要将集合参数包装到一个POJO中才可以。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/user/quick14\"</span> method=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">        &lt;%--表明是第一个User对象的username age--%&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"userList[0].username\"</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"userList[0].age\"</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"userList[1].username\"</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"userList[1].age\"</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"提交\"</span>&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;User&gt; userList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserList</span><span class=\"params\">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userList = userList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"VO&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"userList=\"</span> + userList +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick14\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save14</span><span class=\"params\">(VO vo)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(vo);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"16-SpringMVC的请求-获得请求参数-获得集合类型参数2-应用\">16-SpringMVC的请求-获得请求参数-获得集合类型参数2(应用)<a href=\"post/【SpringMVC】请求-响应#16-SpringMVC的请求-获得请求参数-获得集合类型参数2-应用\"></a></h3><p>当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以直接接收集合数据而无需使用POJO进行包装</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/js/jquery-3.3.1.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> userList = <span class=\"keyword\">new</span> Array();</span><br><span class=\"line\">        userList.push(&#123;username:<span class=\"string\">\"zhangsan\"</span>,age:<span class=\"number\">18</span>&#125;);</span><br><span class=\"line\">        userList.push(&#123;username:<span class=\"string\">\"lisi\"</span>,age:<span class=\"number\">28</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            type:<span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">            url:<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/user/quick15\"</span>,</span><br><span class=\"line\">            data:JSON.stringify(userList),</span><br><span class=\"line\">            contentType:<span class=\"string\">\"application/json;charset=utf-8\"</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick15\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save15</span><span class=\"params\">(@RequestBody List&lt;User&gt; userList)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(userList);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"17-SpringMVC的请求-获得请求参数-静态资源访问的开启-应用\">17-SpringMVC的请求-获得请求参数-静态资源访问的开启(应用)<a href=\"post/【SpringMVC】请求-响应#17-SpringMVC的请求-获得请求参数-静态资源访问的开启-应用\"></a></h3><p>当有静态资源需要加载时，比如jquery文件，通过谷歌开发者工具抓包发现，没有加载到jquery文件，原因是SpringMVC的前端控制器DispatcherServlet的url-pattern配置的是/,代表对所有的资源都进行过滤操作，我们可以通过以下两种方式指定放行静态资源：</p>\n<p>•在spring-mvc.xml配置文件中指定放行的资源</p>\n<p>​     <code>&lt;mvc:resources mapping=&quot;/js/**&quot;location=&quot;/js/&quot;/&gt;</code></p>\n<p>•使用<code>&lt;mvc:default-servlet-handler/&gt;</code>标签</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--开发资源的访问--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;mvc:resources mapping=\"/js/**\" location=\"/js/\"/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;mvc:resources mapping=\"/img/**\" location=\"/img/\"/&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器-应用\">18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器(应用)<a href=\"post/【SpringMVC】请求-响应#18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器-应用\"></a></h3><p>当post请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤。</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置全局过滤的filter--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"19-SpringMVC的请求-获得请求参数-参数绑定注解-RequestParam-应用\">19-SpringMVC的请求-获得请求参数-参数绑定注解@RequestParam(应用)<a href=\"post/【SpringMVC】请求-响应#19-SpringMVC的请求-获得请求参数-参数绑定注解-RequestParam-应用\"></a></h3><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显示的绑定</p>\n<figure class=\"highlight html\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/quick16\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick16\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save16</span><span class=\"params\">(@RequestParam(value=<span class=\"string\">\"name\"</span>,required = <span class=\"keyword\">false</span>,defaultValue = <span class=\"string\">\"itcast\"</span>)</span> String username) <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(username);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取-应用\">20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取(应用)<a href=\"post/【SpringMVC】请求-响应#20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取-应用\"></a></h3><p>Restful是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。</p>\n<p>Restful风格的请求是使用“url+请求方式”表示一次请求目的的，HTTP 协议里面四个表示操作方式的动词如下：</p>\n<p>GET：用于获取资源</p>\n<p>POST：用于新建资源</p>\n<p>PUT：用于更新资源</p>\n<p>DELETE：用于删除资源  </p>\n<p>例如：</p>\n<p>/user/1    GET ：       得到 id = 1 的 user</p>\n<p>/user/1   DELETE：  删除 id = 1 的 user</p>\n<p>/user/1    PUT：       更新 id = 1 的 user</p>\n<p>/user       POST：      新增 user</p>\n<p>上述url地址/user/1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。地址/user/1可以写成/user/{id}，占位符{id}对应的就是1的值。在业务方法中我们可以使用@PathVariable注解进行占位符的匹配获取工作。</p>\n<p><code>http://localhost:8080/itheima_springmvc1/quick17/zhangsan</code></p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick17/&#123;name&#125;\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save17</span><span class=\"params\">(@PathVariable(value=<span class=\"string\">\"name\"</span>)</span> String username) <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(username);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"21-SpringMVC的请求-获得请求参数-自定义类型转换器-应用\">21-SpringMVC的请求-获得请求参数-自定义类型转换器(应用)<a href=\"post/【SpringMVC】请求-响应#21-SpringMVC的请求-获得请求参数-自定义类型转换器-应用\"></a></h3><p>SpringMVC 默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置。</p>\n<p>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如：日期类型的数据就需要自定义转换器。</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateConverter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Converter</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">Date</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">convert</span><span class=\"params\">(String dateStr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//将日期字符串转换成日期对象 返回</span></span><br><span class=\"line\">        SimpleDateFormat format = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\">        Date date = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            date = format.parse(dateStr);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick18\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save18</span><span class=\"params\">(Date date)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(date);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"22-SpringMVC的请求-获得请求参数-获得Servlet相关API-应用\">22-SpringMVC的请求-获得请求参数-获得Servlet相关API(应用)<a href=\"post/【SpringMVC】请求-响应#22-SpringMVC的请求-获得请求参数-获得Servlet相关API-应用\"></a></h3><p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p>\n<p>HttpServletRequest</p>\n<p>HttpServletResponse</p>\n<p>HttpSession</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick19\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save19</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(request);</span><br><span class=\"line\">        System.out.println(response);</span><br><span class=\"line\">        System.out.println(session);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"23-SpringMVC的请求-获得请求参数-获得请求头信息-应用\">23-SpringMVC的请求-获得请求参数-获得请求头信息(应用)<a href=\"post/【SpringMVC】请求-响应#23-SpringMVC的请求-获得请求参数-获得请求头信息-应用\"></a></h3><p>使用@RequestHeader可以获得请求头信息，相当于web阶段学习的request.getHeader(name)</p>\n<p>@RequestHeader注解的属性如下：</p>\n<p>value：请求头的名称</p>\n<p>required：是否必须携带此请求头</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick20\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save20</span><span class=\"params\">(@RequestHeader(value = <span class=\"string\">\"User-Agent\"</span>,required = <span class=\"keyword\">false</span>)</span> String user_agent) <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(user_agent);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>使用@CookieValue可以获得指定Cookie的值</p>\n<p>@CookieValue注解的属性如下：</p>\n<p>value：指定cookie的名称</p>\n<p>required：是否必须携带此cookie</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/quick21\"</span>)</span><br><span class=\"line\">   <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save21</span><span class=\"params\">(@CookieValue(value = <span class=\"string\">\"JSESSIONID\"</span>)</span> String jsessionId) <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">       System.out.println(jsessionId);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"【SpringMVC】文件上传&拦截器&异常处理","link":"post/【SpringMVC】文件上传-拦截器-异常处理"},"next":{"title":"【SpringMVC】入门&组件解析","link":"post/【SpringMVC】入门-组件解析"},"plink":"https://gmahsm.github.io/post/【SpringMVC】请求-响应/","toc":[{"title":"SpringMVC的请求和响应","id":"SpringMVC的请求和响应","index":"1","children":[{"title":"SpringMVC的数据响应","id":"SpringMVC的数据响应","index":"1.1","children":[{"title":"01-SpringMVC的数据响应-数据响应方式(理解)","id":"01-SpringMVC的数据响应-数据响应方式-理解","index":"1.1.1"},{"title":"02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）","id":"02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）","index":"1.1.2"},{"title":"03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1(应用)","id":"03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1-应用","index":"1.1.3"},{"title":"04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2(应用)","id":"04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2-应用","index":"1.1.4"},{"title":"05-SpringMVC的数据响应-页面跳转-返回ModelAndView3(应用)","id":"05-SpringMVC的数据响应-页面跳转-返回ModelAndView3-应用","index":"1.1.5"},{"title":"06-SpringMVC的数据响应-回写数据-直接回写字符串(应用)","id":"06-SpringMVC的数据响应-回写数据-直接回写字符串-应用","index":"1.1.6"},{"title":"07-SpringMVC的数据响应-回写数据-直接回写json格式字符串(应用)","id":"07-SpringMVC的数据响应-回写数据-直接回写json格式字符串-应用","index":"1.1.7"},{"title":"08-SpringMVC的数据响应-回写数据-返回对象或集合(应用)","id":"08-SpringMVC的数据响应-回写数据-返回对象或集合-应用","index":"1.1.8"},{"title":"09-SpringMVC的数据响应-回写数据-返回对象或集合2(应用)","id":"09-SpringMVC的数据响应-回写数据-返回对象或集合2-应用","index":"1.1.9"},{"title":"10-SpringMVC的数据响应-知识要点小结(理解，记忆)","id":"10-SpringMVC的数据响应-知识要点小结-理解，记忆","index":"1.1.10"}]},{"title":"SpringMVC的请求","id":"SpringMVC的请求","index":"1.2","children":[{"title":"11-SpringMVC的请求-获得请求参数-请求参数类型(理解)","id":"11-SpringMVC的请求-获得请求参数-请求参数类型-理解","index":"1.2.1"},{"title":"12-SpringMVC的请求-获得请求参数-获得基本类型参数(应用)","id":"12-SpringMVC的请求-获得请求参数-获得基本类型参数-应用","index":"1.2.2"},{"title":"13-SpringMVC的请求-获得请求参数-获得POJO类型参数(应用)","id":"13-SpringMVC的请求-获得请求参数-获得POJO类型参数-应用","index":"1.2.3"},{"title":"14-SpringMVC的请求-获得请求参数-获得数组类型参数(应用)","id":"14-SpringMVC的请求-获得请求参数-获得数组类型参数-应用","index":"1.2.4"},{"title":"15-SpringMVC的请求-获得请求参数-获得集合类型参数1(应用)","id":"15-SpringMVC的请求-获得请求参数-获得集合类型参数1-应用","index":"1.2.5"},{"title":"16-SpringMVC的请求-获得请求参数-获得集合类型参数2(应用)","id":"16-SpringMVC的请求-获得请求参数-获得集合类型参数2-应用","index":"1.2.6"},{"title":"17-SpringMVC的请求-获得请求参数-静态资源访问的开启(应用)","id":"17-SpringMVC的请求-获得请求参数-静态资源访问的开启-应用","index":"1.2.7"},{"title":"18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器(应用)","id":"18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器-应用","index":"1.2.8"},{"title":"19-SpringMVC的请求-获得请求参数-参数绑定注解@RequestParam(应用)","id":"19-SpringMVC的请求-获得请求参数-参数绑定注解-RequestParam-应用","index":"1.2.9"},{"title":"20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取(应用)","id":"20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取-应用","index":"1.2.10"},{"title":"21-SpringMVC的请求-获得请求参数-自定义类型转换器(应用)","id":"21-SpringMVC的请求-获得请求参数-自定义类型转换器-应用","index":"1.2.11"},{"title":"22-SpringMVC的请求-获得请求参数-获得Servlet相关API(应用)","id":"22-SpringMVC的请求-获得请求参数-获得Servlet相关API-应用","index":"1.2.12"},{"title":"23-SpringMVC的请求-获得请求参数-获得请求头信息(应用)","id":"23-SpringMVC的请求-获得请求参数-获得请求头信息-应用","index":"1.2.13"}]}]}],"reward":true,"copyright":{"custom":"copyright:自由转载-非商用-禁止演绎-保持署名"}}