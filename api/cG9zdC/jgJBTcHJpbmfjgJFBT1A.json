{"title":"【Spring】AOP","date":"2019-08-31T14:21:23.000Z","thumbnail":null,"link":"post/【Spring】AOP","tags":["spring"],"categories":["奇客工具"],"updated":"2019-08-31T14:22:12.232Z","content":"<h3 id=\"1-Spring-的-AOP-简介\">1.Spring 的 AOP 简介<a href=\"post/【Spring】AOP#1-Spring-的-AOP-简介\"></a></h3><h4 id=\"1-1-什么是-AOP\">1.1 什么是 AOP<a href=\"post/【Spring】AOP#1-1-什么是-AOP\"></a></h4><p>AOP 为 Aspect Oriented Programming 的缩写，意思为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</p>\n<p>AOP 是 OOP 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>\n<h4 id=\"1-2-AOP-的作用及其优势\">1.2 AOP 的作用及其优势<a href=\"post/【Spring】AOP#1-2-AOP-的作用及其优势\"></a></h4><p>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强</p>\n<p>优势：减少重复代码，提高开发效率，并且便于维护</p>\n<h4 id=\"1-3-AOP-的底层实现\">1.3 AOP 的底层实现<a href=\"post/【Spring】AOP#1-3-AOP-的底层实现\"></a></h4><p>实际上，AOP 的底层是通过 Spring 提供的的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p>\n<h4 id=\"1-4-AOP-的动态代理技术\">1.4 AOP 的动态代理技术<a href=\"post/【Spring】AOP#1-4-AOP-的动态代理技术\"></a></h4><p>常用的动态代理技术</p>\n<p>JDK 代理 : 基于接口的动态代理技术</p>\n<p>cglib 代理：基于父类的动态代理技术</p>\n<p><img src=\"https://i.loli.net/2019/08/29/GQZN6oDnILqK9xV.png\" alt class=\"article-img\"></p>\n<h4 id=\"1-5-JDK-的动态代理\">1.5 JDK 的动态代理<a href=\"post/【Spring】AOP#1-5-JDK-的动态代理\"></a></h4><p>①目标类接口</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TargetInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>②目标类</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> <span class=\"keyword\">implements</span> <span class=\"title\">TargetInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Target running....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>③动态代理代码</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Target target = <span class=\"keyword\">new</span> Target(); <span class=\"comment\">//创建目标对象</span></span><br><span class=\"line\"><span class=\"comment\">//创建代理对象</span></span><br><span class=\"line\">TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(target.getClass()</span><br><span class=\"line\">.getClassLoader(),target.getClass().getInterfaces(),<span class=\"keyword\">new</span> InvocationHandler() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"前置增强代码...\"</span>);</span><br><span class=\"line\">                Object invoke = method.invoke(target, args);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"后置增强代码...\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> invoke;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></div></figure>\n\n<p>④  调用代理对象的方法测试</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试,当调用接口的任何方法时，代理对象的代码都无序修改</span></span><br><span class=\"line\">proxy.method();</span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"https://i.loli.net/2019/08/29/B9KGInisXbyjzto.png\" alt class=\"article-img\"></p>\n<h4 id=\"1-6-cglib-的动态代理\">1.6 cglib 的动态代理<a href=\"post/【Spring】AOP#1-6-cglib-的动态代理\"></a></h4><p>①目标类</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Target running....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>②动态代理代码</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Target target = <span class=\"keyword\">new</span> Target(); <span class=\"comment\">//创建目标对象</span></span><br><span class=\"line\">Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();   <span class=\"comment\">//创建增强器</span></span><br><span class=\"line\">enhancer.setSuperclass(Target.class); <span class=\"comment\">//设置父类</span></span><br><span class=\"line\">enhancer.setCallback(<span class=\"keyword\">new</span> MethodInterceptor() &#123; <span class=\"comment\">//设置回调</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] objects, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置代码增强....\"</span>);</span><br><span class=\"line\">        Object invoke = method.invoke(target, objects);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"后置代码增强....\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> invoke;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Target proxy = (Target) enhancer.create(); <span class=\"comment\">//创建代理对象</span></span><br></pre></td></tr></table></div></figure>\n\n<p>③调用代理对象的方法测试</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试,当调用接口的任何方法时，代理对象的代码都无序修改</span></span><br><span class=\"line\">proxy.method();</span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"https://i.loli.net/2019/08/29/B9KGInisXbyjzto.png\" alt class=\"article-img\"></p>\n<h4 id=\"1-7-AOP-相关概念\">1.7 AOP 相关概念<a href=\"post/【Spring】AOP#1-7-AOP-相关概念\"></a></h4><p>Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。</p>\n<p>在正式讲解 AOP 的操作之前，我们必须理解 AOP 的相关术语，常用的术语如下：</p>\n<ul>\n<li>Target（目标对象）：代理的目标对象</li>\n<li>Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</li>\n<li>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点</li>\n<li>Pointcut（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义</li>\n<li>Advice（通知/ 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知</li>\n<li>Aspect（切面）：是切入点和通知（引介）的结合</li>\n<li>Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</li>\n</ul>\n<p>1.8 AOP 开发明确的事项</p>\n<p>1.8 AOP 开发明确的事项</p>\n<h4 id=\"1-8-AOP-开发明确的事项\">1.8 AOP 开发明确的事项<a href=\"post/【Spring】AOP#1-8-AOP-开发明确的事项\"></a></h4><h5 id=\"1-需要编写的内容\">1)需要编写的内容<a href=\"post/【Spring】AOP#1-需要编写的内容\"></a></h5><ul>\n<li>编写核心业务代码（目标类的目标方法）</li>\n<li>编写切面类，切面类中有通知(增强功能方法)</li>\n<li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li>\n</ul>\n<h5 id=\"2）AOP-技术实现的内容\">2）AOP 技术实现的内容<a href=\"post/【Spring】AOP#2）AOP-技术实现的内容\"></a></h5><p>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>\n<h5 id=\"3）AOP-底层使用哪种代理方式\">3）AOP 底层使用哪种代理方式<a href=\"post/【Spring】AOP#3）AOP-底层使用哪种代理方式\"></a></h5><p>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p>\n<h4 id=\"1-9-知识要点\">1.9 知识要点<a href=\"post/【Spring】AOP#1-9-知识要点\"></a></h4><ul>\n<li><p>aop：面向切面编程</p>\n</li>\n<li><p>aop底层实现：基于JDK的动态代理 和 基于Cglib的动态代理</p>\n</li>\n<li><p>aop的重点概念：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pointcut（切入点）：被增强的方法</span><br><span class=\"line\"></span><br><span class=\"line\">Advice（通知/ 增强）：封装增强业务逻辑的方法</span><br><span class=\"line\"></span><br><span class=\"line\">Aspect（切面）：切点+通知</span><br><span class=\"line\"></span><br><span class=\"line\">Weaving（织入）：将切点与通知结合的过程</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开发明确事项：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">谁是切点（切点表达式配置）</span><br><span class=\"line\"></span><br><span class=\"line\">谁是通知（切面类中的增强方法）</span><br><span class=\"line\"></span><br><span class=\"line\">将切点和通知进行织入配置</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"2-基于-XML-的-AOP-开发\">2. 基于 XML 的 AOP 开发<a href=\"post/【Spring】AOP#2-基于-XML-的-AOP-开发\"></a></h3><h4 id=\"2-1-快速入门\">2.1 快速入门<a href=\"post/【Spring】AOP#2-1-快速入门\"></a></h4><p>①导入 AOP 相关坐标</p>\n<p>②创建目标接口和目标类（内部有切点）</p>\n<p>③创建切面类（内部有增强方法）</p>\n<p>④将目标类和切面类的对象创建权交给 spring</p>\n<p>⑤在 applicationContext.xml 中配置织入关系</p>\n<p>⑥测试代码</p>\n<p>①导入 AOP 相关坐标</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--导入spring的context坐标，context依赖aop--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- aspectj的织入 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>②创建目标接口和目标类（内部有切点）</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TargetInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> <span class=\"keyword\">implements</span> <span class=\"title\">TargetInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Target running....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>③创建切面类（内部有增强方法）</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//前置增强方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置代码增强.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>④将目标类和切面类的对象创建权交给 spring</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置目标类--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.itheima.aop.Target\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--配置切面类--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myAspect\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.itheima.aop.MyAspect\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>⑤在 applicationContext.xml 中配置织入关系</p>\n<p>导入aop命名空间</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>⑤在 applicationContext.xml 中配置织入关系</p>\n<p>配置切点表达式和前置增强的织入关系</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--引用myAspect的Bean为切面对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myAspect\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--配置Target的method方法执行时要进行myAspect的before方法前置增强--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">\"before\"</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">\"execution(public void com.itheima.aop.Target.method())\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:before</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>⑥测试代码</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(<span class=\"string\">\"classpath:applicationContext.xml\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AopTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TargetInterface target;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        target.method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>⑦测试结果</p>\n<p><img src=\"https://i.loli.net/2019/08/29/ji4eZG51DBayLKU.png\" alt class=\"article-img\"></p>\n<h4 id=\"2-2-XML-配置-AOP-详解\">2.2 XML 配置 AOP 详解<a href=\"post/【Spring】AOP#2-2-XML-配置-AOP-详解\"></a></h4><h5 id=\"1-切点表达式的写法\">1) 切点表达式的写法<a href=\"post/【Spring】AOP#1-切点表达式的写法\"></a></h5><p>表达式语法：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>访问修饰符可以省略</li>\n<li>返回值类型、包名、类名、方法名可以使用星号*  代表任意</li>\n<li>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</li>\n<li>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(public void com.itheima.aop.Target.method())\t</span><br><span class=\"line\">execution(void com.itheima.aop.Target.*(..))</span><br><span class=\"line\">execution(* com.itheima.aop.*.*(..))</span><br><span class=\"line\">execution(* com.itheima.aop..*.*(..))</span><br><span class=\"line\">execution(* *..*.*(..))</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"2-通知的类型\">2) 通知的类型<a href=\"post/【Spring】AOP#2-通知的类型\"></a></h5><p>通知的配置语法：</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:通知类型</span> <span class=\"attr\">method</span>=<span class=\"string\">“切面类中方法名”</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">“切点表达式</span>\"&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:通知类型</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"https://i.loli.net/2019/08/31/Ktjfb7YouOwAkqs.png\" alt class=\"article-img\"></p>\n<h5 id=\"3-切点表达式的抽取\">3) 切点表达式的抽取<a href=\"post/【Spring】AOP#3-切点表达式的抽取\"></a></h5><p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 pointcut-ref 属性代替 pointcut 属性来引用抽取后的切点表达式。</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--引用myAspect的Bean为切面对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myAspect\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myPointcut\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* com.itheima.aop.*.*(..))\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">\"before\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"myPointcut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:before</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"2-3-知识要点\">2.3 知识要点<a href=\"post/【Spring】AOP#2-3-知识要点\"></a></h4><ul>\n<li>aop织入的配置</li>\n</ul>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">“切面类”</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">“通知方法名称”</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">“切点表达式</span>\"&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:before</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>通知的类型：前置通知、后置通知、环绕通知、异常抛出通知、最终通知</li>\n<li>切点表达式的写法：</li>\n</ul>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"3-基于注解的-AOP-开发\">3.基于注解的 AOP 开发<a href=\"post/【Spring】AOP#3-基于注解的-AOP-开发\"></a></h3><h4 id=\"3-1-快速入门\">3.1 快速入门<a href=\"post/【Spring】AOP#3-1-快速入门\"></a></h4><p>基于注解的aop开发步骤：</p>\n<p>①创建目标接口和目标类（内部有切点）</p>\n<p>②创建切面类（内部有增强方法）</p>\n<p>③将目标类和切面类的对象创建权交给 spring</p>\n<p>④在切面类中使用注解配置织入关系</p>\n<p>⑤在配置文件中开启组件扫描和 AOP 的自动代理</p>\n<p>⑥测试</p>\n<p>①创建目标接口和目标类（内部有切点）</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TargetInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> <span class=\"keyword\">implements</span> <span class=\"title\">TargetInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Target running....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>②创建切面类（内部有增强方法)</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//前置增强方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置代码增强.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>③将目标类和切面类的对象创建权交给 spring</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"target\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> <span class=\"keyword\">implements</span> <span class=\"title\">TargetInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Target running....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"myAspect\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置代码增强.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>④在切面类中使用注解配置织入关系</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"myAspect\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* com.itheima.aop.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置代码增强.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>⑤在配置文件中开启组件扫描和 AOP 的自动代理</p>\n<figure class=\"highlight xml\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--组件扫描--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.itheima.aop\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--aop的自动代理--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>⑥测试代码</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(<span class=\"string\">\"classpath:applicationContext.xml\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AopTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TargetInterface target;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        target.method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>⑦测试结果</p>\n<p><img src=\"https://i.loli.net/2019/08/31/vgpoqfhOWScwtbK.png\" alt class=\"article-img\"></p>\n<h4 id=\"3-2-注解配置-AOP-详解\">3.2 注解配置 AOP 详解<a href=\"post/【Spring】AOP#3-2-注解配置-AOP-详解\"></a></h4><h5 id=\"1-注解通知的类型\">1) 注解通知的类型<a href=\"post/【Spring】AOP#1-注解通知的类型\"></a></h5><p>通知的配置语法：@通知注解(“切点表达式”)</p>\n<p><img src=\"https://i.loli.net/2019/08/31/HGQmXd9qpibgjy7.png\" alt class=\"article-img\"></p>\n<h5 id=\"2-切点表达式的抽取\">2) 切点表达式的抽取<a href=\"post/【Spring】AOP#2-切点表达式的抽取\"></a></h5><p>同 xml配置<br>aop 一样，我们可以将切点表达式抽取。抽取方式是在切面内定义方法，在该方法上使用@Pointcut注解定义切点表达式，然后在在增强注解中进行引用。具体如下：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"meta\">@Component</span>(<span class=\"string\">\"myAspect\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"MyAspect.myPoint()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置代码增强.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.itheima.aop.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">myPoint</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"3-3-知识要点\">3.3 知识要点<a href=\"post/【Spring】AOP#3-3-知识要点\"></a></h4><ul>\n<li>注解aop开发步骤</li>\n</ul>\n<p>①使用@Aspect标注切面类</p>\n<p>②使用@通知注解标注通知方法</p>\n<p>③在配置文件中配置aop自动代理<a href=\"aop:aspectj-autoproxy/\" target=\"_blank\" rel=\"noopener\">aop:aspectj-autoproxy/</a></p>\n<ul>\n<li>通知注解类型</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/08/31/ADVLkGFgzEOWQrS.png\" alt class=\"article-img\"></p>\n<p>​    </p>\n","prev":{"title":"【SpringMVC】入门&组件解析","link":"post/【SpringMVC】入门-组件解析"},"next":{"title":"【Spring】IoC&DI","link":"post/【Spring】IoC-DI"},"plink":"https://gmahsm.github.io/post/【Spring】AOP/","reward":true,"copyright":{"custom":"copyright:自由转载-非商用-禁止演绎-保持署名"}}